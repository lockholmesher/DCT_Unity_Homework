Toán tử số học trong C#

+	Thêm hai toán hạng	A + B sẽ cho kết quả là 30
-	Trừ giá trị toán hạng hai từ toán hạng đầu	A - B sẽ cho kết quả là -10
*	Nhân hai toán hạng	A * B sẽ cho kết quả là 200
/	Chia lấy phần nguyên hai toán hạng	B / A sẽ cho kết quả là 2
%	Chia lấy phần dư	B % A sẽ cho kết quả là 0
++	Lượng gia giá trị toán hạng thêm 1 đơn vị	A++ sẽ cho kết quả là 11
--	Lượng giảm giá trị toán hạng một đơn vị	A-- sẽ cho kết quả là 9

Toán tử quan hệ trong C#

==	Kiểm tra nếu 2 toán hạng bằng nhau hay không. Nếu bằng thì điều kiện là true.	(A == B) là không đúng.
!=	Kiểm tra 2 toán hạng có giá trị khác nhau hay không. Nếu không bằng thì điều kiện là true.	(A != B) là true.
>	Kiểm tra nếu toán hạng bên trái có giá trị lớn hơn toán hạng bên phải hay không. Nếu lớn hơn thì điều kiện là true.	(A > B) là không đúng.
<	Kiểm tra nếu toán hạng bên trái nhỏ hơn toán hạng bên phải hay không. Nếu nhỏ hơn thì là true.	(A < B) là true.
>=	Kiểm tra nếu toán hạng bên trái có giá trị lớn hơn hoặc bằng giá trị của toán hạng bên phải hay không. Nếu đúng là true.	(A >= B) là không đúng.
<=	Kiểm tra nếu toán hạng bên trái có giá trị nhỏ hơn hoặc bằng toán hạng bên phải hay không. Nếu đúng là true.	(A <= B) là true.
Toán tử logic trong C#

Bảng dưới đây chỉ rõ tất cả các toán tử logic được hỗ trợ bởi ngôn ngữ C#. Giả sử biến A có giá trị 1 và biến B có giá trị 0:

&&	Được gọi là toán tử logic AND (và). Nếu cả hai toán tử đều có giá trị khác 0 thì điều kiện trở lên true.	(A && B) là false.
||	Được gọi là toán tử logic OR (hoặc). Nếu một trong hai toán tử khác 0, thì điều kiện là true.	(A || B) là true.
!	Được gọi là toán tử NOT (phủ định). Sử dụng để đảo ngược lại trạng thái logic của toán hạng đó. Nếu điều kiện toán hạng là true thì phủ định nó sẽ là false.	!(A && B) là true.

Toán tử gán trong C#

=	Toán tử gán đơn giản. Gán giá trị toán hạng bên phải cho toán hạng trái.	C = A + B sẽ gán giá trị của A + B vào trong C
+=	Thêm giá trị toán hạng phải tới toán hạng trái và gán giá trị đó cho toán hạng trái.	C += A tương đương với C = C + A
-=	Trừ đi giá trị toán hạng phải từ toán hạng trái và gán giá trị này cho toán hạng trái.	C -= A tương đương với C = C - A
*=	Nhân giá trị toán hạng phải với toán hạng trái và gán giá trị này cho toán hạng trái.	C *= A tương đương với C = C * A
/=	Chia toán hạng trái cho toán hạng phải và gán giá trị này cho toán hạng trái.	C /= A tương đương với C = C / A
%=	Lấy phần dư của phép chia toán hạng trái cho toán hạng phải và gán cho toán hạng trái.	C %= A tương đương với C = C % A
<<=	Dịch trái toán hạng trái sang số vị trí là giá trị toán hạng phải.	C <<= 2 tương đương với C = C << 2
>>=	Dịch phải toán hạng trái sang số vị trí là giá trị toán hạng phải.	C >>= 2 tương đương với C = C >> 2
&=	Phép AND bit	C &= 2 tương đương với C = C & 2
^=	Phép OR loại trừ bit	C ^= 2 tương đương với C = C ^ 2
|=	Phép OR bit.	C |= 2 tương đương với C = C | 2

Các toán tử hỗn hợp trong C#

sizeof()	Trả về kích cỡ của một kiểu dữ liệu	sizeof(int), trả về 4
typeof()	Trả về kiểu của một lớp	typeof(StreamReader);
&	Trả về địa chỉ của một biến	&a; trả về địa chỉ thực sự của biến
*	Trỏ tới một biến	*a; tạo con trỏ với tên là a tới một biến
? :	Biểu thức điều kiện (Conditional Expression)	Nếu Condition là true ? Thì giá trị X : Nếu không thì Y
is	Xác định đối tượng là một kiểu cụ thể hay không	If( Ford is Car) // Kiểm tra nếu Ford là một đối tượng của lớp Car
as	Ép kiểu mà không tạo một exception nếu việc ép kiểu thất bại